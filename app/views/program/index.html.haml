.location-explanation
  .span12
    .location
      - @rooms.each do |r|
        %span.room-name{:style => ("background-color: " + r.color.to_s + ";")}
          =r.name
    .time

%h1
  Program 

%dl.talk-types
  %dt
    %i.icon-bolt
  %dd
    Lyntale
  %dt
    %i.icon-comment
  %dd
    Foredrag
  %dt
    %i.icon-wrench
  %dd
    Workshop

.btn.toggle-filter
  %i.icon-filter
  %span.text
    Vis filter
.filter
  .toggle-workshops
    %span
      Vis workshops
    .make-switch.switch-mini.switch-toggle{:data => { :"on-label" => "ja", :"off-label" => "nei", :on => "success",  :off => "danger", :toggle => ".workshop"}}
      %input{:type => "checkbox", :checked => "checked"}

  - @talk_category.each_slice(@talk_category.length / 3) do |tcg|
    %ul.talk-categories
      - tcg.each do |tc|
        %li
          .talk-category
            %span.label.pull-left{:class => t("label." + tc.name, default: ''), :title => tc.name}
              =t("label." + tc.name, default: tc.name.slice(0,2)).upcase
            .make-switch.switch-mini.switch-toggle{:data => { :"on-label" => "ja", :"off-label" => "nei", :on => "success",  :off => "danger", :toggle => (".talk_category_" + tc.id.to_s)}}
              %input{:type => "checkbox", :checked => "checked"}
            =tc.name

- @program[:days].each do |day|
  .row-fluid.day
    .span12
      %h1
        =localize day[:date], :format => "%A" + ","
        =day[:date].to_formatted_s(:short)
  - day[:starts].each do |sw|
    .row-fluid.timeslot-time.visible-phone
      .span12
        %h2.timeslot-start
          =sw[:start].to_formatted_s(:short)
    .row-fluid.timeslot{:class => (sw[:room_count] == 1 ? "single-room" : "")}
      -sw[:timeslots].each do |t|
        - if t.is_workshop_slot?
          .row-fluid.timeslot-time.visible-phone.workshop
            .span12
              %h2.timeslot-start
                =t.start.to_formatted_s(:short)
                \- 
                =t.end.to_formatted_s(:time)
        -t.roomslot.each do |r|
          .room{:style => ("border-color: " + r.room.color.to_s + "; width: " + (100 / (sw[:room_count] == 1 ? 1 : @program[:max_roomslots])).to_s + "%"), :class => (t.is_workshop_slot ? "workshop" : "")}
            %h2.room-title.hidden-phone
              %span.room-name{:style => ("background-color: " + r.room.color.to_s + ";")}
                =r.room.name
              %span.time
                =r.timeslot.start.to_formatted_s(:time)
                - if r.timeslot.end > r.timeslot.start
                  \- 
                  =r.timeslot.end.to_formatted_s(:time)
            .talks
              - if r.title? &&  r.description?
                .description
                  - if r.title?
                    %h3
                      = r.title
                  - if r.description?
                    %p
                      = r.description
              - r.talks.each do |talk|
                .talk{:class => ("talk_category_" + talk.talk_category.id.to_s)}
                  %h4.title
                    %span.meta.pull-right
                      %span.pull-right.label.label-small{:class => t("label." + talk.talk_category.name), :title => talk.talk_category.name}
                        =t("label." + talk.talk_category.name)
                      - if talk.talk_type.name == "Lyntale"
                        %i.icon-bolt
                      - if talk.talk_type.name == "Kort workshop" or talk.talk_type.name == "Lang workshop"
                        %i.icon-wrench
                      - if talk.talk_type.name == "Foredrag"
                        %i.icon-comment
                      %div.duration
                        #{talk.talk_type.duration} min
                    =sanitize(talk.title)
                  %em.author
                    =sanitize(talk.user.name)
                    - if talk.users.length > 0
                      , #{talk.users.map { |u| u.name }.join(', ')}
                  .description
                    =simple_format(talk.description)
                    = render 'workshop_participant/participate', :talk => talk
